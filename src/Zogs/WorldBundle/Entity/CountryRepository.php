<?php

namespace Zogs\WorldBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CountryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CountryRepository extends EntityRepository
{

	public function findAllCountry(){

	    $qb = $this->_em->createQueryBuilder()
	                              ->select('c')
	                              ->from($this->_entityName, 'c');


	    return $qb->getQuery()->getResult();
	}

	public function findCountryByCode($cc1)
	{

		$qb = $this->createQueryBuilder('c');

		$qb->select('c')
			->where(
				$qb->expr()->eq('c.code',':cc1')
				);

		$qb->setParameter('cc1',$cc1);

		return $qb->getQuery()->getSingleResult();
	}

	public function findCountryByName($name)
	{

		$qb = $this->createQueryBuilder('c');

		$qb->select('c')
			->where(
				$qb->expr()->eq('c.name',':name')
				);

		$qb->setParameter('name',$name);

		return $qb->getQuery()->getSingleResult();
	}

	public function findCountryById($id)
	{

		$qb = $this->createQueryBuilder('c');

		$qb->select('partial c.{id,code,name,lang}')
			->where(
				$qb->expr()->eq('c.id',':id')
				);

		$qb->setParameter('id',$id);

		return $qb->getQuery()->getSingleResult();
	}

	public function findByCodeOrId($id)
	{
		if(is_numeric($id))
			return $this->findCountryById($id);
		if(is_string($id))
			return $this->findCountryByCode($id);
	}

	public function findCountryList($key='code')
	{
		$qb = $this->_em->createQueryBuilder()
							->select('c.name, c.'.$key)
							->from($this->_entityName,'c');

		$p = $qb->getQuery()->getArrayResult();
		$r = array();
		foreach($p as $v){			
			$r[$v['name']] = $v[$key];
		}

		return $r;
	}

	public function findCodeByCountryName($name)
	{
		$qb = $this->createQueryBuilder('c');
		$qb->select('partial c.{id,code,name,lang}')
			->where(
				$qb->expr()->eq('c.name',':name')
				);

		$qb->setParameter('name',$name);
		$res = $qb->getQuery()->getSingleResult();
		$code = $res->getCode();

		//free memory
		unset($res);

		return $code;		
	}

	public function findCountryIdFromCode($code)
	{
		$qb = $this->createQueryBuilder('c');
		$qb->select('partial c.{id,code,name,lang}')
			->where(
				$qb->expr()->eq('c.code',':code')
				);
		$qb->setParameter('code',$code);
		$country = $qb->getQuery()->getSingleResult();

		return $country->getId();
	}


}

?>