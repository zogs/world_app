<?php

namespace Zogs\WorldBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
/**
 * CityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CityRepository extends EntityRepository
{
	/**
	 * Return City:object from its UNI code
	 *
	 * @param integer $uni
	 * @return City:object	
	 */
	public function findCityByUNI($uni)
	{
		$qb = $this->createQueryBuilder('c');
		$qb->where(
			$qb->expr()->eq('c.uni',':uni')
			);
		$qb->setParameter('uni',$uni);
		
		return $qb->getQuery()->getSingleResult();

	}

	/**
	 * Return City:object from its unique id
	 *
	 * @param interger $id
	 * @return City:object
	 */
	public function findCityById($id)
	{
		$qb = $this->createQueryBuilder('c');
		$qb->where(
			$qb->expr()->eq('c.id',':id')
			);
		$qb->setParameter('id',$id);
		
		return $qb->getQuery()->getOneOrNullResult();

	}

	/**
	 * Return City:object from its name
	 * Can be optimised by giving owning states codes
	 *
	 * @param string $name
	 * @param string $countryCode
	 * @param string $regionCode
	 * @param string $departementCode
	 * @param string $districtCode
	 * @param string $division Code
	 *
	 * @return City:object
	 */
	public function findCityByName($name,$countryCode = null, $regionCode = null, $departementCode = null, $districtCode = null, $divisionCode = null)
	{
		$params = array();
		$sql = "
			SELECT c
			FROM ZogsWorldBundle:City c
			JOIN ZogsWorldBundle:Country p
			WITH p.code = c.cc1 
			WHERE (p.lang = c.lc OR c.lc = '')
		";

		if(isset($countryCode)) {
			$sql.=' AND c.cc1 = :cc1 ';
			$params['cc1'] = $countryCode;
		}
		if(isset($regionCode)){
			$sql .= 'AND c.adm1 = :adm1 ';
			$params['adm1'] = $regionCode;
		}
		if(isset($departementCode)){
			$sql .= 'AND c.adm2 = :adm2 ';
			$params['adm2'] = $departementCode;
		}
		if(isset($districtCode)){
			$sql .= 'AND c.adm3 = :adm3 ';
			$params['adm3'] = $districtCode;
		}
		if(isset($divisionCode)){
			$sql .= 'AND c.adm4 = :adm4 ';
			$params['adm4'] = $divisionCode;
		}

		$sql .= ' AND (c.fullnamed = :name OR c.fullname = :name) ';
		$params['name'] = $name;

		$sql .= ' ORDER BY c.pop DESC';

		$qb = $this->getEntityManager()->createQuery($sql)->setParameters($params);
		$qb->setMaxResults(1);	

		return $qb->getOneOrNullResult();
	}

	/**
	 * Return array of cities suggestions from a prefix string
	 *
	 * @param integer $limit : number of suggestions
	 * @param string $prefix 
	 * @param string $countryCode
	 * @param string $regionCode
	 * @param string $departementCode
	 * @param string $districtCode
	 * @param string $division Code
	 *
	 * @return array of City:object
	 */
	public function findCitiesSuggestions( $limit, $prefix , $countryCode = null, $regionCode = null, $departementCode = null, $districtCode = null, $divisionCode = null){

		$params = array();
		$sql = "
			SELECT c
			FROM ZogsWorldBundle:City c
			JOIN ZogsWorldBundle:Country p
			WITH p.code = c.cc1 
			WHERE p.lang = c.lc
		";

		if(isset($countryCode)) {
			$sql.=' AND c.cc1 = :cc1 ';
			$params[':cc1'] = $countryCode;
		}
		if(isset($regionCode)){
			$sql .= 'AND c.adm1 = :adm1 ';
			$params[':adm1'] = $regionCode;
		}
		if(isset($departementCode)){
			$sql .= 'AND c.adm2 = :adm2 ';
			$params[':adm2'] = $departementCode;
		}
		if(isset($districtCode)){
			$sql .= 'AND c.adm3 = :adm3 ';
			$params[':adm3'] = $districtCode;
		}
		if(isset($divisionCode)){
			$sql .= 'AND c.adm4 = :adm4 ';
			$params[':adm4'] = $divisionCode;
		}

		$sql .= ' AND (c.fullnamed LIKE :prefix OR c.fullname LIKE :prefix) ';
		$params[':prefix'] = $prefix.'%';

		$sql .= ' ORDER BY c.pop DESC'  ;

		$qb = $this->getEntityManager()->createQuery($sql)->setParameters($params);
		$qb->setMaxResults($limit);	

		return $qb->getResult();
	}

	/**
	 * Return array of City:object that are contains in the parent given
	 *
	 * @param Country|State:objects $parent
	 * @return array of City:object
	 */
	public function findCitiesByStateParent($parent)
	{
		if($parent->getLevel()=='country')
			return $this->findCitiesByCode($parent->getCc1());
		if($parent->getLevel()=='region')
			return $this->findCitiesByCode($parent->getCc1(),$parent->getADMCODE());
		if($parent->getLevel()=='departement')
			return $this->findCitiesByCode($parent->getCc1(),$parent->getADMPARENT(),$parent->getADMCODE());
		if($parent->getLevel()=='district')
			return $this->findCitiesByCode($parent->getCc1(),null,$parent->getADMPARENT(),$parent->getADMCODE());
		if($parent->getLevel()=='division')
			return $this->findCitiesByCode($parent->getCc1(),null,null,$parent->getADMPARENT(),$parent->getADMCODE());
		
	}

	/**
	 * Return array of City:object from states codes
	 *
	 * @param string $countryCode
	 * @param string $regionCode
	 * @param string $departementCode
	 * @param string $districtCode
	 * @param string $division Code
	 *
	 * @return array of City:object
	 */
	public function findCitiesByCode($countryCode, $regionCode = null, $departementCode = null, $districtCode = null, $divisionCode = null)
	{
		$sql = "
			SELECT s
			FROM ZogsWorldBundle:City s 
			JOIN ZogsWorldBundle:Country c 
			WITH c.code = s.cc1
			WHERE s.cc1 = :cc1
			AND ( 1 = 1 
				";
		if(isset($regionCode))
			$sql .= " AND s.adm1 = :adm1 ";
		if(isset($departementCode))
			$sql .= " AND s.adm2 = :adm2 ";
		if(isset($districtCode))
			$sql .= " AND s.adm3 = :adm3 ";
		if(isset($divisionCode))
			$sql .= " AND s.adm4 = :adm4 ";
		$sql .="
			)
			AND (
				s.lc = c.lang
				OR
				s.lc = ''
				)
			ORDER BY s.fullnamed ";
		
		$query = $this->getEntityManager()->createQuery($sql);
		$query->setParameter('cc1',$countryCode);
		if(isset($regionCode))
			$query->setParameter('adm1',$regionCode);
		if(isset($departementCode))
			$query->setParameter('adm2',$departementCode);
		if(isset($districtCode))
			$query->setParameter('adm3',$districtCode);
		if(isset($divisionCode))
			$query->setParameter('adm4',$divisionCode);

		return $query->getResult();
	}

	/**
	 * Return array of City:object that are in the radius $radius of the coord $lat $lon
	 *
	 * @param integer $radius
	 * @param number $lat
	 * @param number $lon
	 * @param (optional) string $countryCode : optimise the request
	 * @param (optional) string $unit : unit to use km|miles
	 *
	 * @return array of City:object
	 */
	public function findCitiesArround($radius, $lat, $lon, $countryCode = null, $unit = 'km')
	{		
		//constante for units
		if($unit=='km')
		{
			$onedegree = 111.045;
			$earthradius = 6366.565;			
		}
		elseif($unit=='miles')
		{
			$onedegree = 69;
			$earthradius = 3956;
		}

		//calcul of the box
		$lon1 = $lon-$radius/abs(cos(deg2rad($lat))*$onedegree);
		$lon2 = $lon+$radius/abs(cos(deg2rad($lat))*$onedegree);
		$lat1 = $lat-($radius/$onedegree);
		$lat2 = $lat+($radius/$onedegree);

		//calculation of distance field
		$distance_formula = " $earthradius * 2 * ASIN(SQRT( POWER(SIN(($lat - C.latitude) *  pi()/180 / 2), 2) +COS($lat * pi()/180) * COS(C.latitude * pi()/180) * POWER(SIN(($lon - C.longitude) * pi()/180 / 2), 2) )) as distance ";

		$sql = 'SELECT C.*, '.$distance_formula;
		$sql .= 'FROM world_cities as C ';
		$sql .= 'JOIN world_country as WC ON WC.CC1 = C.CC1 ';
		$sql .= 'WHERE (WC.LO = C.LC OR C.LC="") ';
		if(isset($countryCode))
			$sql .= 'AND C.cc1=:cc1 ';
		$sql .= ' AND C.longitude BETWEEN '.$lon1.' AND '.$lon2.' AND C.latitude BETWEEN '.$lat1.' AND '.$lat2.' ';
		$sql .= ' having distance < '.$radius;
		$sql .= ' ORDER BY distance ASC, C.pop DESC';

		//Use the ResultSetMappingBuilder to map the results data to the City object data
		$rsm = new ResultSetMappingBuilder($this->_em);
		$rsm->addRootEntityFromClassMetadata('Zogs\WorldBundle\Entity\City', 'C');
			
		$query = $this->_em->createNativeQuery($sql,$rsm);
		$query->setParameter('cc1',$countryCode);

		$results = $query->getResult();

		return $results;
		//return $this->getQuery($sql)->getResult();

	}

	/**
	 * Return City:object who is the nearest to the coord $lat $lon
	 *
	 * @param number $lat
	 * @param number $lon
	 * @param (optional) string $countryCode : optimise the request
	 * @param (optional) integer $popMin : population minimum
	 *
	 * @return City:object
	 */
	public function findNearestCity($lat,$lon,$countryCode = null,$popMin = null)
	{
		$distance_formula = " 3956 * 2 * ASIN(SQRT( POWER(SIN((:lat - C.latitude) *  pi()/180 / 2), 2) +COS(:lat * pi()/180) * COS(C.latitude * pi()/180) * POWER(SIN((:lon - C.longitude) * pi()/180 / 2), 2) )) as distance ";

		$sql = 'SELECT C.*, '.$distance_formula;
		$sql .= 'FROM world_cities as C ';
		$sql .= 'JOIN world_country as WC ON WC.CC1 = C.CC1 ';
		$sql .= 'WHERE (WC.LO = C.LC OR C.LC="") ';
		if(isset($countryCode))
			$sql .= 'AND C.cc1=:cc1 ';
		if(isset($popMin))
			$sql .= ' AND C.pop >= :popMin';		
		$sql .= ' ORDER BY distance ASC';
		$sql .= ' LIMIT 1';

		//Use the ResultSetMappingBuilder to map the results data to the City object data
		$rsm = new ResultSetMappingBuilder($this->_em);
		$rsm->addRootEntityFromClassMetadata('Zogs\WorldBundle\Entity\City', 'C');
			
		$query = $this->_em->createNativeQuery($sql,$rsm);
		$query->setParameter('lat',$lat);
		$query->setParameter('lon',$lon);
		if(isset($countryCode)) $query->setParameter('cc1',$countryCode);
		if(isset($popMin)) $query->setParameter('popMin',$popMin);

		return $query->getSingleResult();

	}


	private function resultSetMappingCity()
	{
		$rsm = new ResultSetMapping();
		$rsm->addEntityResult('Zogs\WorldBundle\Entity\City', 'C');
		$rsm->addFieldResult('C', 'id', 'id');
		$rsm->addFieldResult('C', 'CHAR_CODE', 'char_code');		
		$rsm->addFieldResult('C', 'UNI', 'uni');
		$rsm->addFieldResult('C', 'CC1', 'cc1');
		$rsm->addFieldResult('C', 'DSG', 'dsg');
		$rsm->addFieldResult('C', 'ADM1', 'adm1');
		$rsm->addFieldResult('C', 'ADM2', 'adm2');
		$rsm->addFieldResult('C', 'ADM3', 'adm3');
		$rsm->addFieldResult('C', 'ADM4', 'adm4');
		$rsm->addFieldResult('C', 'LC', 'lc');
		$rsm->addFieldResult('C', 'FULLNAMED', 'fullnamed');
		$rsm->addFieldResult('C', 'LATITUDE', 'latitude');
		$rsm->addFieldResult('C', 'LONGITUDE', 'longitude');		

		return $rsm;
	}
}
