

/* SASS component */
/* clearfix extends (works >IE7 )   ex: .float-container{ @extend %clearfix;}*/
%clearfix:after{
	content:'';
	display:table;
	clear:both;
	zoom:1;
}
/* font sizing */
@mixin rem($value,$base:10){
	font-size: $value + px;
	font-size: $value / $base + rem;
}
/* positionning */
@mixin pos($top, $right, $bottom, $left, $position: absolute) {
    @if    $top != auto { top    : $top }
    @if  $right != auto { right  : $right }
    @if $bottom != auto { bottom : $bottom }
    @if   $left != auto { left   : $left }
    position : $position;
}
/* media query */
@mixin mq($size) {
    @if $size == small {
        @media (max-width: 48em) { @content; }
    }
    @if $size == medium {
        @media (max-width: 58em) { @content; }
    }
    @if $size == large {
        @media (min-width: 68em) { @content; }
    }
    @if $size == retina {
      @media  
        only screen and (-webkit-min-device-pixel-ratio: 1.3),
        only screen and (min-resolution: 124.8dpi),
        only screen and (min-resolution: 1.3dppx) { 
          @content;                 
        }
    }
}
/* emboss */
@mixin box-emboss($opacity:0.8, $opacity2:0.1){
    box-shadow:white($opacity) 0 1px 0, inset black($opacity2) 0 1px 0;
}
/* opacity */
@mixin opacity($opacity:0.5) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}
/* html5 placeholder */
@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &:-moz-placeholder           {@content}
  &::-moz-placeholder          {@content}
  &:-ms-input-placeholder      {@content}  
};

/* animation mixin */
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}
@mixin keyframes($animation-name) {
  @-webkit-keyframes $animation-name {
    @content;
  }
  @-moz-keyframes $animation-name {
    @content;
  }  
  @-ms-keyframes $animation-name {
    @content;
  }
  @-o-keyframes $animation-name {
    @content;
  }  
  @keyframes $animation-name {
    @content;
  }
}

/* transition mixin */
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}
/* long shadow */
@mixin long-shadow($type, $color, $length, $fadeout: true, $skew: false, $direction: right){
  $shadow: '';
  @if $skew == false or $type == text{
    @if $direction == right {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $color + ',';
      }
    }
    @if $direction == left {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $color + ',';
       }
      }
     }
        
   @if $fadeout == true{
    @for $i from 1 to $length - 1 {
      @if $type == text or $skew == false{
        @if $direction == right{
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
        @if $direction == left{
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
      }
      @if ($type == box) and $skew == true{
        @if $direction == right {
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
        @if $direction == left {
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
      }
  }
  $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba($color, 0);
 }
 @if $fadeout == false{
   @if $skew == true and ( $type == box ){
     @for $i from 0 to $length - 1 {
            $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .1 + 'px ' + $color + ',';
      }
   }
    $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba(0,0,0,0);
 }
 $shadow: unquote($shadow);
  @if $type == 'box' {box-shadow: $shadow;}
  @if $type == 'text' {text-shadow: $shadow;}
}

/* vertical background striped mixin */
@mixin vertical-stripes($colors, $direction: "to bottom") {  
    $stripe-width: 100% / length($colors);
    $auto:         if( type-of(nth($colors, 1)) == list, false, true );
    $gradient:     ();
    
    @for $i from 1 through length($colors) {
        $item: nth($colors, $i);
        $dump: ();
      
        @if $auto == true {
            $dump: $item $stripe-width * ($i - 1), $item $stripe-width * $i;
        }
      
        @else {   
            @if $i > 1 {
                $previous-item: nth($colors, $i - 1);
                $dump: append($dump, nth($item, 1) nth($previous-item, 2));
            }
            $dump: append($dump, $item);
        }

        $gradient: join($gradient, $dump, comma);
    }		

    @include background-image(linear-gradient($direction, $gradient));
}
/* diagonal background stripes mixin */
@mixin diagonal-stripes($angle: -45deg, $color: rgba(0, 0, 0, 1), $size: 4px /* size must be an even number */) {
  background-image: -webkit-repeating-linear-gradient($angle, $color, $color 25%, transparent 25%, transparent 50%, $color 50%);
  background-image: -moz-repeating-linear-gradient($angle, $color, $color 25%, transparent 25%, transparent 50%, $color 50%);
  background-image: -ms-repeating-linear-gradient($angle, $color, $color 25%, transparent 25%, transparent 50%, $color 50%);
  background-image: -o-repeating-linear-gradient($angle, $color, $color 25%, transparent 25%, transparent 50%, $color 50%);
  background-image: repeating-linear-gradient($angle, $color, $color 25%, transparent 25%, transparent 50%, $color 50%);

	$sizes: $size + 'px '+ $size +'px';
  background-size: unquote($sizes);
}
@mixin arrow-lazy($direction: top, $size: 10px, $color: #ccc, $center: 50%, $margin: -1px, $pseudo: before){
    position: relative;
    border-color: $color;

    &:#{$pseudo} {
        position: absolute;
        content: "";
        width: 0;
        height: 0;
        border-color: $color;

        @if $direction == "right" {
            top: $center;
            left: 100%;
            margin-left: $margin;
            margin-top: $size * -1;
            border-top: $size solid transparent;
            border-bottom: $size solid transparent;
            border-left: $size solid $color;
            border-left-color: inherit;
        } @else if $direction == "down" {
            top: 100%;
            left: $center;
            margin-top: $margin;
            margin-left: $size * -1;
            border-left: $size solid transparent;
            border-right: $size solid transparent;
            border-top: $size solid $color;
            border-top-color: inherit;
        } @else if $direction == "left" {
            top: $center;
            right: 100%;
            margin-right: $margin;
            margin-top: $size * -1;
            border-top: $size solid transparent;
            border-bottom: $size solid transparent; 
            border-right:$size solid $color;
            border-right-color: inherit;
        } @else {
            bottom: 100%;
            left: $center;
            margin-bottom: $margin;
            margin-left: $size * -1;
            border-left: $size solid transparent;
            border-right: $size solid transparent;
            border-bottom: $size solid $color;
            border-bottom-color: inherit;
        }
    }
}